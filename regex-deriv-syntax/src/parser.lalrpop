use std::str::FromStr;
use regex_deriv::{RegEx, ByteSet};
use crate::{literal, utils::range};

grammar;

match {
    r"[^^+*?|()~&\s\[\]-]" => NON_PUNCT,
    r"\\[.+*?()|&~\[\]{}^-]" => ESC_PUNCT,
    _
}

pub Expr: RegEx = {
    <r:Expr> "|" <s:Clause> => r.or(&s),
    Clause,
}

Clause: RegEx = {
    <r:Clause> "&" <s:Seq> => r.and(&s),
    <r:Clause> "-" <s:Seq> => r.diff(&s),
    Seq,
}

Seq: RegEx = {
    <r:Seq> <s:Term> => r.then(&s),
    Term
}

Term: RegEx = {
    <Factor> "?" => <>.opt(),
    <Factor> "*" => <>.star(),
    <Factor> "+" => <>.plus(),
    "~" <Factor> => <>.not(),
    Factor,
}

Factor: RegEx = {
    "(" <Expr> ")",
    CharClass,
    <NON_PUNCT> => literal(<>),
}

CharClass: RegEx = {
    "[" "]" => {
        panic!("character set cannot be empty")
    },
    "[" <r:CCItemStart> <rs:CCItem*> "]" => {
        rs.into_iter().fold(r, |acc, regex| acc.or(&regex))
    },
    "[" "^" <CCItem*> "]" => {
        match <>.into_iter().reduce(|acc, regex| acc.or(&regex)) {
            Some(regex) => todo!(),
            None => todo!(),
        }
    },
}

CCItemStart: RegEx = {
    <a:CCCharStart> "-" <b:CCChar> => range(a, b),
    <CCCharStart> => literal(<>),
    CharClass,
}

CCItem: RegEx = {
    <a:CCChar> "-" <b:CCChar> => range(a, b),
    <CCChar> => literal(<>),
    CharClass,
}

CCCharStart = {
    Char,
    "*", "+", "?",
}

CCChar = {
    Char,
    "*", "+", "?",
    "^",
}

Char = {
    NON_PUNCT,
    ESC_PUNCT => &<>[1..],
}